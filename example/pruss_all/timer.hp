#ifndef TIMER_HP_INCLUDED
#define TIMER_HP_INCLUDED


#include <pru.h>
#include <pru_macros.hp>


// am335xPruReferenceGuide, table 25
#define PRUSS_PRU_CTRL_REG_WAKEUP_EN 0x08

// am335xPruReferenceGuide, table 190
// offsets from CONST_IEP
#define IEP_REG_GLOBAL_CFG 0x00
#define IEP_REG_GLOBAL_STATUS 0x04
#define IEP_REG_COMPEN 0x08
#define IEP_REG_COUNT 0x0c
#define IEP_REG_CMP_CFG 0x40
#define IEP_REG_CMP_STATUS 0x44
#define IEP_REG_CMP0 0x48


.macro TIMER_SETUP
.mparam counter

 /* use r0 */

 /* TODO: enable IEP interrupt source */
 /* TODO: route interrupt controller channel 7 */
 /* TODO: and use sleep instruction instead of polling */
 /* TODO: am335xPruReferenceGuide, section 6.3 */
 /* TODO: http://elinux.org/PRUSSv2_Interrupt_Controller */

 /* MOV r0, 1 << 7 */
 /* MOV r1, CTRL_WAKEUP_EN */
 /* ST32 r0, r1 */

 LBCO r0, CONST_PRUCFG, 0x10, 4                    
 SET r0, 17
 SBCO r0, CONST_PRUCFG, 0x10, 4   

 MOV r0, (1 << 8) | (1 << 4)
 SBCO r0, CONST_IEP, IEP_REG_GLOBAL_CFG, 4

 MOV r0, 0
 SBCO r0, CONST_IEP, IEP_REG_COMPEN, 4

 MOV r0, 0
 SBCO r0, CONST_IEP, IEP_REG_COUNT, 4

 MOV r0, (1 << 1) | (1 << 0)
 SBCO r0, CONST_IEP, IEP_REG_CMP_CFG, 4

 MOV r0, counter
 SBCO r0, CONST_IEP, IEP_REG_CMP0, 4

 /* start IEP free running counter */

 LBCO r0, CONST_IEP, IEP_REG_GLOBAL_CFG, 4
 SET r0, 0
 SBCO r0, CONST_IEP, IEP_REG_GLOBAL_CFG, 4

.endm /* TIMER_SETUP */


.macro TIMER_WAIT

 /* use r0 */

 IEP_WAIT_EVENT:
 LBCO r0, CONST_IEP, IEP_REG_CMP_STATUS, 4
 QBBC IEP_WAIT_EVENT, r0, 0
 SBCO 0, CONST_IEP, IEP_REG_CMP_STATUS, 4

.endm /* TIMER_WAIT */


#endif /* TIMER_HP_INCLUDED */
